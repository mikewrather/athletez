<?php
/**
 * $description
 *
 * Date: 8/27/13
 * Time: 3:40 PM
 *
 * @author: Mike Wrather
 *
 */
return array(

	'users_id' => array(
		'id' => '1',
		'name' => 'User',
		'api_name' => 'user',
		'class_name' => 'User_Base',
		'db_table' => 'users',
		'description' => 'A User can be an athlete, a coach, a fan, or something else we think of in the future.  However the user itself is independent of roles and logic about what user roles have access to what will be coded logic',
		'id1' => 'users_id',
		'id2' => '',
	),
	'orgs_id' => array(
		'id' => '2',
		'name' => 'Organization',
		'api_name' => 'org',
		'class_name' => 'Sportorg_Org',
		'db_table' => 'orgs',
		'description' => 'An Organization is either a high school or a Sports Club.  It can have many sports associated with it or a single sport.  ',
		'id1' => 'orgs_id',
		'id2' => '',
	),
	'positions_id' => array(
		'id' => '3',
		'name' => 'Sports Position',
		'api_name' => 'position',
		'class_name' => 'Sportorg_Position',
		'db_table' => 'positions',
		'description' => 'Each sport will have many positions associated with it which athletes can select per team.',
		'id1' => 'positions_id',
		'id2' => '',
	),
	'sports_id' => array(
		'id' => '4',
		'name' => 'Sport',
		'api_name' => 'sport',
		'class_name' => 'Sportorg_Sport',
		'db_table' => 'sports',
		'description' => 'A sport is a very simple entity which basically specifies a name, a gender and a type.  ',
		'id1' => 'sports_id',
		'id2' => '',
	),
	'teams_id' => array(
		'id' => '5',
		'name' => 'Team',
		'api_name' => 'team',
		'class_name' => 'Sportorg_Team',
		'db_table' => 'teams',
		'description' => 'Team is the intersection of an organization (e.g. Blair Acadamy), a sport (e.g. Football), a season (e.g. Winter), and a competition level (e.g. Varsity).  There is also the possibility of adding a misc identifier if there are two teams matching all of those criteria.  For instance, if there is a \"Red Team\" and \"Blue Team\" on a volleyball club that are both U17 Competion Level.',
		'id1' => 'teams_id',
		'id2' => '',
	),
	'seasons_id' => array(
		'id' => '6',
		'name' => 'Season',
		'api_name' => 'season',
		'class_name' => 'Sportorg_Seasons_Base',
		'db_table' => 'seasons',
		'description' => 'Seasons are grouped into profiles and can be anything from the standard Winter/Spring/Fall high school seasons or Summer club seasons or simply be a year-round season.',
		'id1' => 'seasons_id',
		'id2' => '',
	),
	'season_profiles_id' => array(
		'id' => '7',
		'name' => 'Season Profile',
		'api_name' => 'seasonprofile',
		'class_name' => 'Sportorg_Seasons_Profile',
		'db_table' => 'season_profiles',
		'description' => 'A Season Profile will group seasons into collections which are then associated with an organization.  So a season profile selected for a high school would be Fall/Winter/Spring.  The season profile allows us to offer a different selection of seasons based on the organization the athlete is involved with.',
		'id1' => 'season_profiles_id',
		'id2' => '',
	),
	'games_id' => array(
		'id' => '8',
		'name' => 'Game',
		'api_name' => 'game',
		'class_name' => 'Sportorg_Games_Base',
		'db_table' => 'games',
		'description' => 'A Game is composed of a Datetime, a Location, and some number of teams.  It can be further broken down into matches for sports where that is applicable.',
		'id1' => 'games_id',
		'id2' => '',
	),
	'game_matches_id' => array(
		'id' => '9',
		'name' => 'Game Match',
		'api_name' => 'gamematch',
		'class_name' => 'Sportorg_Games_Match',
		'db_table' => 'game_matches',
		'description' => 'For sports that have several matches within a game such as wrestling, each of those matches is stored with the result of that match.  It also stores specific athletes involved in that match (seperately)',
		'id1' => 'game_matches_id',
		'id2' => '',
	),
	'game_match_players_id' => array(
		'id' => '10',
		'name' => 'Game Match Player',
		'api_name' => 'gamematchplayer',
		'class_name' => 'Sportorg_Games_Matchplayer',
		'db_table' => 'game_match_players',
		'description' => 'A Game Match Player specifies a player involved in a specific match.  Because a match does not always involve an entire team the players of a match must be stored separately.',
		'id1' => 'game_match_players_id',
		'id2' => '',
	),
	'complevels_id' => array(
		'id' => '11',
		'name' => 'Competition Level',
		'api_name' => 'complevel',
		'class_name' => 'Sportorg_Complevel_Base',
		'db_table' => 'complevels',
		'description' => 'A Competition Level can be the traditional high school levels of Junior Varsity and Varsity, but it can also be age group levels like U16 and U17 for club sports.  Competition levels are grouped into profiles which are then associated with an organization.',
		'id1' => 'complevels_id',
		'id2' => '',
	),
	'complevel_profiles_id' => array(
		'id' => '12',
		'name' => 'Competition Level Profile',
		'api_name' => 'complevelprofile',
		'class_name' => 'Sportorg_Complevel_Profile',
		'db_table' => 'complevel_profiles',
		'description' => 'Competition Levels are grouped into Profiles which are then associated with an organization.  So if the organization an athlete belongs to is a high school they will have the profile with JV and V.  If the organization is a club it will be different.  This is designed to be expandable.',
		'id1' => 'complevel_profiles_id',
		'id2' => '',
	),
	'comments_id' => array(
		'id' => '14',
		'name' => 'Comment',
		'api_name' => 'comment',
		'class_name' => 'Site_Comment',
		'db_table' => 'comments',
		'description' => 'A Comment links some string of text (the comment) to an Anonymous Entity using an Entity (or \"subject\") Type ID and an Entity ID.  So the Type ID could specify a user or a game or a video or any other type of entity, while the Entity ID would specify which of those users, games, or videos the comment is connected to.',
		'id1' => 'comments_id',
		'id2' => '',
	),
	'tags_id' => array(
		'id' => '16',
		'name' => 'Item Tag',
		'api_name' => 'tag',
		'class_name' => 'Site_Tag',
		'db_table' => 'tags',
		'description' => 'A Tag links a user (the tagged user) to an Anonymous Entity using an Entity (or \"subject\") Type ID and an Entity ID.  So the Type ID could specify an image or a game or a video or any other type of entity, while the Entity ID would specify which of those images, games, or videos the user is being tagged in.  The user doing the tagging is also stored.',
		'id1' => 'tags_id',
		'id2' => '',
	),
	'votes_id' => array(
		'id' => '18',
		'name' => 'Vote',
		'api_name' => 'vote',
		'class_name' => 'Site_Vote',
		'db_table' => 'votes',
		'description' => 'A Vote links a user (the voter) to an Anonymous Entity using an Entity (or \"subject\") Type ID and an Entity ID.  So the Type ID could specify an image or a game or a video or any other type of entity, while the Entity ID would specify which of those images, games, or videos the user is voting on.',
		'id1' => 'votes_id',
		'id2' => '',
	),
	'media_id' => array(
		'id' => '19',
		'name' => 'Media',
		'api_name' => 'media',
		'class_name' => 'Media_Base',
		'db_table' => 'media',
		'description' => 'Media is the umbrella type which both images and videos fall under.  Media is associated with a user and a sport.  An image can be associated with ',
		'id1' => 'media_id',
		'id2' => '',
	),
	'images_id' => array(
		'id' => '21',
		'name' => 'Image',
		'api_name' => 'image',
		'class_name' => 'Media_Image',
		'db_table' => 'images',
		'description' => 'An image is a type of media with most information being stored in the image metadata table.  The object handles pulling and compiling that information.',
		'id1' => 'images_id',
		'id2' => '',
	),
	'videos_id' => array(
		'id' => '23',
		'name' => 'Video Clip',
		'api_name' => 'video',
		'class_name' => 'Media_Video',
		'db_table' => 'videos',
		'description' => 'A Video is a type of media.  Videos can be one of many types (formats / resolutions).  Videos have a metadata table that will hold most information about them (duration, resolution, codec, container, etc).',
		'id1' => 'videos_id',
		'id2' => '',
	),
	'video_services_id' => array(
		'id' => '24',
		'name' => 'Vido Production Service',
		'api_name' => 'videoservice',
		'class_name' => 'Media_Videoservice',
		'db_table' => 'video_services',
		'description' => 'A Video Production Service can be given credit for a video.  They contain outside links to the service\'s website and have information on regions that the service firm covers.',
		'id1' => 'video_services_id',
		'id2' => '',
	),
	'resume_data_id' => array(
		'id' => '25',
		'name' => 'Athletic Resume Data',
		'api_name' => 'resumedata',
		'class_name' => 'User_Resume_Data',
		'db_table' => 'resume_data',
		'description' => 'Athletic Resume Data is a single peice of data without a user value.  So this could be \"40 yard dash\" or \"Vertical Leap\".  Resume Data is grouped and those groups are then grouped into a \"Profile\".  A single peice of data can exist in several groups.',
		'id1' => 'resume_data_id',
		'id2' => '',
	),
	'resume_data_groups_id' => array(
		'id' => '26',
		'name' => 'Athletic Resume Data Group',
		'api_name' => 'resumedatagroup',
		'class_name' => 'User_Resume_Data_Group',
		'db_table' => 'resume_data_groups',
		'description' => 'This is a group of Athletic resume data.  A single peice of Resume Data (e.g. \"40 yard dash time\") can exist in multiple groups.  These groups are then associated with an \"Athletic Resume Data Profile\". ',
		'id1' => 'resume_data_groups_id',
		'id2' => '',
	),
	'resume_data_profiles_id' => array(
		'id' => '27',
		'name' => 'Athletic Resume Data Profile',
		'api_name' => 'resumedataprofile',
		'class_name' => 'User_Resume_Data_Profile',
		'db_table' => 'resume_data_profiles',
		'description' => 'An Athletic Resume Data Profile is a collection of Athletic Resume Data Groups.  This allows a group to be used in more than one profile.  Profiles are then associated with 1 or more sports.  So The same Resume Data Group could exist in a profile for football and basketball.  Indoor and outdoor track could share the same profile.',
		'id1' => 'resume_data_profiles_id',
		'id2' => '',
	),
	'resume_data_vals_id' => array(
		'id' => '28',
		'name' => 'Athletic Resume Data Value',
		'api_name' => 'resumedataval',
		'class_name' => 'User_Resume_Data_Vals',
		'db_table' => 'resume_data_vals',
		'description' => 'An Athletic Resume Data Value is the actual user-entered answer to a peice of Resume Data.  So this would contain the athletes 40 yard dash time in seconds or the vertical leap in inches.',
		'id1' => 'resume_data_vals_id',
		'id2' => '',
	),
	'stattabs_id' => array(
		'id' => '30',
		'name' => 'Statistics Tab',
		'api_name' => 'stattab',
		'class_name' => 'Stats_Tab',
		'db_table' => 'stattabs',
		'description' => 'Because each sport can contain so many statistics fields, they are broken down into tabs.  This is simply a group of statistics for a sport.  For instance with football there could be an offense tab, a defense tab, and a special teams tab.',
		'id1' => 'stattabs_id',
		'id2' => '',
	),
	'stats_id' => array(
		'id' => '31',
		'name' => 'Statistic',
		'api_name' => 'stat',
		'class_name' => 'Stats_Base',
		'db_table' => 'stats',
		'description' => 'This is a single statistic without a user value.  So this could be Total At Bats or Total Yards Gained.  These will be grouped into tabs.',
		'id1' => 'stats_id',
		'id2' => '',
	),
	'queuedvideos_id' => array(
		'id' => '32',
		'name' => 'Video Queued for Processing',
		'api_name' => 'queuedvideo',
		'class_name' => 'Media_Queuedvideo',
		'db_table' => 'queuedvideos',
		'description' => 'When a video is uploaded, it is placed in this queue and sent to Zencoder for encoding.  The queue object listens and keeps track of which formats zencoder has finished encoding.  When all formats have been received without error, the Queued Video object will mark the actual video object as ready to go.',
		'id1' => 'queuedvideos_id',
		'id2' => '',
	),
	'locations_id' => array(
		'id' => '33',
		'name' => 'Location',
		'api_name' => 'location',
		'class_name' => 'Location_Base',
		'db_table' => 'locations',
		'description' => 'A location is stored as an address, as well as a point data type.  So if no address exists a location can still be plotted on a map as long as there is a longitude and latitude.  Locations exist as seperate entities so that they can be associated with multiple other objects.  For example, a high school has a location which might also be the location associated with a handful of games.',
		'id1' => 'locations_id',
		'id2' => '',
	),
	'cities_id' => array(
		'id' => '34',
		'name' => 'City',
		'api_name' => 'city',
		'class_name' => 'Location_City',
		'db_table' => 'cities',
		'description' => 'A City references a parent County',
		'id1' => 'cities_id',
		'id2' => '',
	),
	'counties_id' => array(
		'id' => '35',
		'name' => 'County',
		'api_name' => 'county',
		'class_name' => 'Location_County',
		'db_table' => 'counties',
		'description' => 'A County references a parent State',
		'id1' => 'counties_id',
		'id2' => '',
	),
	'states_id' => array(
		'id' => '36',
		'name' => 'State',
		'api_name' => 'state',
		'class_name' => 'Location_State',
		'db_table' => 'states',
		'description' => 'A State references a parent County and can contain divisions, leagues, sections, and more.',
		'id1' => 'states_id',
		'id2' => '',
	),
	'player_of_game_id' => array(
		'id' => '37',
		'name' => 'Player of the Game',
		'api_name' => 'pog',
		'class_name' => 'Site_Pog',
		'db_table' => 'player_of_game',
		'description' => 'On a game page, any athlete in the roster of one of the competing teams can be voted \"Player of the Game\".  It\'s like MVP.  The POG votes will dictate their placement on the roster listing.',
		'id1' => 'player_of_game_id',
		'id2' => '',
	),
	'divisions_id' => array(
		'id' => '40',
		'name' => 'Sports Division',
		'api_name' => 'division',
		'class_name' => 'Sportorg_Division',
		'db_table' => 'divisions',
		'description' => 'An organization can be associated with a division.  Divisions then can belong to a section (but this is not always the case).  This is mostly for searching for a team.',
		'id1' => 'divisions_id',
		'id2' => '',
	),
	'leagues_id' => array(
		'id' => '41',
		'name' => 'Sports League',
		'api_name' => 'league',
		'class_name' => 'Sportorg_League',
		'db_table' => 'leagues',
		'description' => 'An organization can be associated with a league.  Leagues then can belong to a section (but this is not always the case).  This is mostly for searching for a team.',
		'id1' => 'leagues_id',
		'id2' => '',
	),
	'sections_id' => array(
		'id' => '43',
		'name' => 'Sports Section',
		'api_name' => 'section',
		'class_name' => 'Sportorg_Section',
		'db_table' => 'sections',
		'description' => 'Large States are broken into sections before they are broken into Leagues / Divisions.  So a section might be \"Southern California\" in a large state like California.',
		'id1' => 'sections_id',
		'id2' => '',
	),
	'sport_types_id' => array(
		'id' => '44',
		'name' => 'Sport Type',
		'api_name' => 'sporttype',
		'class_name' => 'Sportorg_Sporttype',
		'db_table' => 'sport_types',
		'description' => 'The Sport type will be used to designate whether a sport is event-driven, score driven, team-based or individual, etc.  The sport type will be used to determine how various things are presented on the site.',
		'id1' => 'sport_types_id',
		'id2' => '',
	),
	'stat_contexts_id' => array(
		'id' => '45',
		'name' => 'Statistics Context',
		'api_name' => 'statcontext',
		'class_name' => 'Stats_Context',
		'db_table' => 'stat_contexts',
		'description' => 'The statistics context exists so that we can designate whether a set of stats is for a game, a season, or something else.',
		'id1' => 'stat_contexts_id',
		'id2' => '',
	),
	'subject_type_id' => array(
		'id' => '46',
		'name' => 'Anonymous Entity',
		'api_name' => 'ent',
		'class_name' => 'Site_Enttype',
		'db_table' => 'enttypes',
		'description' => 'Anonymous entities can become many different types of objects.  Instead of having a single ID and a table, a type is specified which will determine the table the id refers to.  This is used for things like comments, votes, tags, and media associations.',
		'id1' => 'subject_type_id',
		'id2' => 'subject_id',
	),
	'statvals_id' => array(
		'id' => '47',
		'name' => 'Statistic Value',
		'api_name' => 'statval',
		'class_name' => 'Stats_Vals',
		'db_table' => 'statvals',
		'description' => 'This is a user value for a specific statistic',
		'id1' => 'statvals_id',
		'id2' => '',
	),
	'roles_id' => array(
		'id' => '48',
		'name' => 'Role',
		'api_name' => 'role',
		'class_name' => 'Role',
		'db_table' => 'roles',
		'description' => 'A user can have many roles associated with his or her account such as login, admin, etc.',
		'id1' => 'roles_id',
		'id2' => '',
	),
	'countries_id' => array(
		'id' => '49',
		'name' => 'Country',
		'api_name' => 'country',
		'class_name' => 'Location_Country',
		'db_table' => 'countries',
		'description' => 'A Country...',
		'id1' => 'countries_id',
		'id2' => '',
	),
	'video_types_id' => array(
		'id' => '50',
		'name' => 'Video Type',
		'api_name' => 'videotype',
		'class_name' => 'Media_Videotype',
		'db_table' => 'video_types',
		'description' => 'Video Types -- a combination of container, codec, resolution, framerate and other video characteristics.',
		'id1' => 'video_types_id',
		'id2' => '',
	),
	'phrases_id' => array(
		'id' => '51',
		'name' => 'Text Phrase',
		'api_name' => 'phrase',
		'class_name' => 'Site_Phrase',
		'db_table' => 'phrases',
		'description' => 'This is a single piece of text that will appear somewhere on the front end.',
		'id1' => 'phrases_id',
		'id2' => '',
	),
	'languages_id' => array(
		'id' => '52',
		'name' => 'Language',
		'api_name' => 'lang',
		'class_name' => 'Site_Language',
		'db_table' => 'languages',
		'description' => 'A Language...',
		'id1' => 'languages_id',
		'id2' => '',
	),
	'colleges_id' => array(
		'id' => '53',
		'name' => 'College',
		'api_name' => 'college',
		'class_name' => 'College_Base',
		'db_table' => 'colleges',
		'description' => 'This is a college which can be searched to send resumes to.',
		'id1' => 'colleges_id',
		'id2' => '',
	),
	'college_coaches_id' => array(
		'id' => '54',
		'name' => 'College Coach',
		'api_name' => 'collegecoach',
		'class_name' => 'College_Coach',
		'db_table' => 'college_coaches',
		'description' => 'This is a coach who will recieve an emailed resume',
		'id1' => 'college_coaches_id',
		'id2' => '',
	),
	'collge_regions_id' => array(
		'id' => '55',
		'name' => 'College Region',
		'api_name' => 'collegeregion',
		'class_name' => 'College_Region',
		'db_table' => 'college_regions',
		'description' => 'This s one of several regions where a college can be located in the United States.',
		'id1' => 'collge_regions_id',
		'id2' => '',
	),
	'college_divisions_id' => array(
		'id' => '56',
		'name' => 'College Division',
		'api_name' => 'collegedivision',
		'class_name' => 'College_Division',
		'db_table' => 'college_divisions',
		'description' => 'This is one of several athletic divisions a college can belong to.',
		'id1' => 'college_divisions_id',
		'id2' => '',
	),
	'academics_tests_id' => array(
		'id' => '57',
		'name' => 'Academic Test',
		'api_name' => 'academictest',
		'class_name' => 'Academics_Tests',
		'db_table' => 'academics_tests',
		'description' => 'This is a test such as SAT or an AP test',
		'id1' => 'academics_tests_id',
		'id2' => '',
	),
	'academics_tests_topics_id' => array(
		'id' => '58',
		'name' => 'Academic Test Topic',
		'api_name' => 'testtopic',
		'class_name' => 'Academics_Tests_Topics',
		'db_table' => 'academics_tests_topics',
		'description' => 'This is a sub-topic of an Academic Test such as \"Reading\" or \"Math\"',
		'id1' => 'academics_tests_topics_id',
		'id2' => '',
	),
	'academics_tests_scores_id' => array(
		'id' => '59',
		'name' => 'Test Score',
		'api_name' => 'testscore',
		'class_name' => 'Academics_Tests_Scores',
		'db_table' => 'academics_tests_scores',
		'description' => 'This is a score that a user has entered for a given test topic.',
		'id1' => 'academics_tests_scores_id',
		'id2' => '',
	),
	'academics_gpa_id' => array(
		'id' => '60',
		'name' => 'GPA',
		'api_name' => 'gpa',
		'class_name' => 'Academics_Gpa',
		'db_table' => 'academics_gpa',
		'description' => 'This is a Grade Point Average for a user in a given year of high school.',
		'id1' => 'academics_gpa_id',
		'id2' => 'year',
	),
	'feed_id' => array(
		'id' => '61',
		'name' => 'Feed Item',
		'api_name' => 'feed',
		'class_name' => 'Site_Feed',
		'db_table' => 'feed',
		'description' => 'A single feed item',
		'id1' => 'feed_id',
		'id2' => '',
	),
	'feed_follow_id' => array(
		'id' => '62',
		'name' => 'Feed Follow',
		'api_name' => 'feedfollow',
		'class_name' => 'Site_Feedfollow',
		'db_table' => 'feed_follow',
		'description' => 'This is a link between a user\'s feed and an item which appears in the feed',
		'id1' => 'feed_follow_id',
		'id2' => '',
	),
	'flags_id' => array(
		'id' => '63',
		'name' => 'Flag',
		'api_name' => 'flags',
		'class_name' => 'Site_Flag',
		'db_table' => 'flags',
		'description' => 'A flag will mark an item for a moderator to check',
		'id1' => 'flags_id',
		'id2' => '',
	),
	'followers_id' => array(
		'id' => '64',
		'name' => 'User_Followers',
		'api_name' => 'follower',
		'class_name' => 'User_Followers',
		'db_table' => 'followers',
		'description' => 'This is a link between a user and an entity that they are following',
		'id1' => 'followers_id',
		'id2' => '',
	),
	'' => array(
		'id' => '65',
		'name' => 'Game / Team Link',
		'api_name' => 'gameteamlink',
		'class_name' => 'Sportorg_Games_Teamslink',
		'db_table' => 'games_teams_link',
		'description' => 'This just registers a team with a game',
		'id1' => '',
		'id2' => '',
	),
	'image_types_id' => array(
		'id' => '66',
		'name' => 'Image Type',
		'api_name' => 'imagetype',
		'class_name' => 'Media_Imagetype',
		'db_table' => 'image_types',
		'description' => 'This is an image type that each image will be rendered into',
		'id1' => 'image_types_id',
		'id2' => '',
	),
	'' => array(
		'id' => '67',
		'name' => 'Organization / League Link',
		'api_name' => 'orgleaguelink',
		'class_name' => 'Sportorg_Leaguelink',
		'db_table' => 'org_league_link',
		'description' => 'Classifies an organization as belonging to a specific league',
		'id1' => '',
		'id2' => '',
	),
	'org_sport_link_id' => array(
		'id' => '68',
		'name' => 'Organization / Sport Link',
		'api_name' => 'orgsportlink',
		'class_name' => 'Sportorg_Orgsportlink',
		'db_table' => 'org_sport_link',
		'description' => 'This will link an org to a sport',
		'id1' => 'org_sport_link_id',
		'id2' => '',
	),
	'phrases_translation_id' => array(
		'id' => '69',
		'name' => 'Translated Phrase',
		'api_name' => 'translatedphrase',
		'class_name' => 'Site_Prases_Translation',
		'db_table' => 'phrases_translation',
		'description' => 'Translated Phrase',
		'id1' => 'phrases_translation_id',
		'id2' => '',
	),
	'' => array(
		'id' => '70',
		'name' => 'Resume Group / Profile Link',
		'api_name' => 'rdgrdplink',
		'class_name' => 'User_Resume_Data_Group_Profilelink',
		'db_table' => 'rdg_rdp_link',
		'description' => 'Linking Table',
		'id1' => '',
		'id2' => '',
	),
	'' => array(
		'id' => '71',
		'name' => 'Resume Profile / Sport Link',
		'api_name' => 'rdpsportslink',
		'class_name' => 'User_Resume_Data_Profile_Sportslink',
		'db_table' => 'rdp_sports_link',
		'description' => 'Linking Table',
		'id1' => '',
		'id2' => '',
	),
	'resume_references_id' => array(
		'id' => '72',
		'name' => 'Resume Reference',
		'api_name' => 'resumereference',
		'class_name' => 'User_Resume_Reference',
		'db_table' => 'resume_references',
		'description' => 'A Reference a user will put on his / her resume',
		'id1' => 'resume_references_id',
		'id2' => '',
	),
	'resumes_sent_id' => array(
		'id' => '73',
		'name' => 'Sent Resumes',
		'api_name' => 'sentresumes',
		'class_name' => 'User_Resume_Sent',
		'db_table' => 'resumes_sent',
		'description' => 'This tracks who users have sent their resumes to',
		'id1' => 'resumes_sent_id',
		'id2' => '',
	),
	'' => array(
		'id' => '74',
		'name' => 'User / Role Link',
		'api_name' => 'role',
		'class_name' => 'Rolesusers',
		'db_table' => 'roles_users',
		'description' => 'Link for Users / Rols',
		'id1' => '',
		'id2' => '',
	),
	'social_links_id' => array(
		'id' => '75',
		'name' => 'Social Links',
		'api_name' => 'sociallinks',
		'class_name' => 'Social_Links',
		'db_table' => 'social_links',
		'description' => '',
		'id1' => 'social_links_id',
		'id2' => '',
	),
	'social_types_id' => array(
		'id' => '76',
		'name' => 'Social Types',
		'api_name' => 'socialtypes',
		'class_name' => 'Social_Types',
		'db_table' => 'social_types',
		'description' => '',
		'id1' => 'social_types_id',
		'id2' => '',
	),
	'user_identities_id' => array(
		'id' => '77',
		'name' => 'User Identity',
		'api_name' => 'useridentity',
		'class_name' => 'User_Identity',
		'db_table' => 'user_identities',
		'description' => '',
		'id1' => 'user_identities_id',
		'id2' => '',
	),
	'user_sport_link_id' => array(
		'id' => '78',
		'name' => 'User / Individual Sport Link',
		'api_name' => 'usersportlink',
		'class_name' => 'User_Sportlink',
		'db_table' => 'user_sport_link',
		'description' => 'Link between a user and an individual sport.',
		'id1' => 'user_sport_link_id',
		'id2' => '',
	),
	'user_tokens_id' => array(
		'id' => '79',
		'name' => 'User Token',
		'api_name' => 'usertoken',
		'class_name' => 'User_Tokens',
		'db_table' => 'user_tokens',
		'description' => '',
		'id1' => 'user_tokens_id',
		'id2' => '',
	),
	'user_teams_link_id' => array(
		'id' => '80',
		'name' => 'User / Team Link',
		'api_name' => 'userteamslink',
		'class_name' => 'User_Teamslink',
		'db_table' => 'user_teams_link',
		'description' => 'Puts a user on a team\'s roster',
		'id1' => 'user_teams_link_id',
		'id2' => '',
	),
	'usl_game_link_id' => array(
		'id' => '81',
		'name' => 'Individual Sport Game Link',
		'api_name' => 'uslgamelink',
		'class_name' => 'User_Sportlink_Gamelink',
		'db_table' => 'usl_game_link',
		'description' => 'Link between a user\'s individual sport and a game',
		'id1' => 'usl_game_link_id',
		'id2' => '',
	),
	'utl_position_link_id' => array(
		'id' => '82',
		'name' => 'Team Position',
		'api_name' => 'teamposition',
		'class_name' => 'User_Teamslink_Positionlink',
		'db_table' => 'utl_position_link',
		'description' => 'Stores what positions a player played on a team',
		'id1' => 'utl_position_link_id',
		'id2' => '',
	),
	'video_type_link_id' => array(
		'id' => '83',
		'name' => 'Video Type Link',
		'api_name' => 'videotypelink',
		'class_name' => 'Media_Videotypelink',
		'db_table' => 'video_type_link',
		'description' => 'Linking table for videos and video types',
		'id1' => 'video_type_link_id',
		'id2' => '',
	),
	'views_id' => array(
		'id' => '84',
		'name' => 'Single View',
		'api_name' => 'view',
		'class_name' => 'Site_View',
		'db_table' => 'views',
		'description' => 'Stores when a user calls for some specific peice of data',
		'id1' => 'views_id',
		'id2' => '',
	),
	'awards_id' => array(
		'id' => '85',
		'name' => 'Awards',
		'api_name' => 'awards',
		'class_name' => 'User_Awards',
		'db_table' => 'awards',
		'description' => 'This is the awards for user',
		'id1' => 'awards_id',
		'id2' => '',
	),
	'references_id' => array(
		'id' => '86',
		'name' => 'References',
		'api_name' => 'references',
		'class_name' => 'User_References',
		'db_table' => 'references',
		'description' => 'This is the references for user',
		'id1' => 'references_id',
		'id2' => '',
	),
	'user_contact_id' => array(
		'id' => '87',
		'name' => 'User contact info',
		'api_name' => 'usercontact',
		'class_name' => 'User_Contact',
		'db_table' => 'user_contact',
		'description' => 'Save user contact info',
		'id1' => 'user_contact_id',
		'id2' => '',
	),
	'invites_id' => array(
		'id' => '88',
		'name' => 'Facebook Invitation',
		'api_name' => 'fbinvite',
		'class_name' => 'Site_Invite_Facebook',
		'db_table' => 'invites',
		'description' => 'This is an invitation that refers specifically to the facebook class and will store fb ID and user information.',
		'id1' => 'invites_id',
		'id2' => '',
	),

);